1.Create an abstract class 'Vehicle' with an abstract method 'start()'. Create two
subclasses 'Car' and 'Bike' that inherit the 'Vehicle' class and implement the 'start()'
method differently.

abstract class Vehicle
{
  void start();
}

class Bike implements Vehicle{
  @override
  void start()
  {
    print('self');
  }
}
class Car implements Vehicle{
  @override
  void start()
  {
    print(' car self');
  }
}

void main(){
   
 Bike bike= Bike();
  bike.start();
 Car car = Car();
  car.start();
}


2. Create a superclass 'Shape' with a method 'draw()' and two subclasses 'Circle'
and 'Rectangle' that inherit the 'Shape' class. Implement method overloading in the
'Circle' class and method overriding in the 'Rectangle' class.


class Shape{
  draw(int l,int w){
    print('draw circle or rectangle');
  }
   }
// class Circle extends Shape{
//   draw(int r){
//     double area;
//       area = 3.14*r*r;
//          print('area = $area');
//   }
// }
class Rectangle extends Shape{
  @override
  draw(int l,int b){
    int area;
    area = l*b;
   print('area of rectangle=$area');
  }
}
void main()
{
  Rectangle rect = Rectangle();
   rect.draw(10,20);
//   Circle circle = Circle();
//    circle.draw(3);
}


3. Create a superclass 'Animal' with a protected method 'sound()'. Create two
subclasses 'Cat' and 'Dog' that inherit the 'Animal' class and call the 'sound()' method
from within their own method.


class Animal{
  sound(){
    print('animals make different sounds');
  }
}
class Cat extends Animal{
  cat(){
  super.sound();
    print('cat make sound meow meow\n');
  }
}
class Dog extends Animal{
  dog(){
  super.sound();
    print('dog make sound bow bow');
  }
}

void main(){
   Cat meow = Cat();
    meow.cat();
   Dog bow = Dog();
    bow.dog();
    }
    
 4. Create a class 'Employee' that contains private data members 'name' and 'salary',
and a public method 'getSalary()'. Try to create a subclass of the 'Employee' class
and create a method in child class to print details of the employee.

class Employee {
  String _name;
  double _salary;

  Employee(this._name, this._salary);

  double getSalary() {
    return _salary;
  }
}
class EmpDetails extends Employee {
  EmpDetails(super._name,super._salary);
  
    printDetails() {
    print("Name: ${super._name}");
    print("Salary: ${super.getSalary()}");
  }
}
void main(){
  EmpDetails salary = EmpDetails('manu',20000);
   salary.printDetails();
}


5. Create a superclass 'Animal' with a method 'move()'. Create two interfaces 'Swim'
and 'Walk' with the same method 'move()'. Create a subclass 'Fish' that implements
the 'Swim' interface and a subclass 'Lion' that implements the 'Walk' interface.
Finally, create a class 'SeaLion' that inherits both 'Fish' and 'Lion' classes and
overrides the 'move()' method.


class Animal{
  move(){  
    print("animals");
  }
}
abstract class Swim{
 move();
    
  
}
abstract class Walk{
  move();
} 
  
class Fish implements Swim{
  @override
  move(){
    print('fish can swim');
  }
  
}
class Lion  implements Walk{
  @override
  move(){
    print('lion can walk');
  }
  
}
class SeaLion extends Lion with Fish {
  @override
  move(){
    print('seaLion can both walk and swim');
  }
}
void main(){
  SeaLion sea = SeaLion();
  sea.move();
  Lion lion = Lion();
  lion.move();
  Fish fish = Fish();
  fish.move();
}

